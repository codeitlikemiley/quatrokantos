import 'dart:convert';

import 'package:collection/collection.dart';

class PackageJson {
  final String name;
  final String version;
  final String description;
  final String author;
  final Map<String, String> scripts;

  PackageJson({
    required this.name,
    required this.version,
    required this.description,
    required this.author,
    required this.scripts,
  });

  PackageJson copyWith({
    String? name,
    String? version,
    String? description,
    String? author,
    Map<String, String>? scripts,
  }) {
    return PackageJson(
      name: name ?? this.name,
      version: version ?? this.version,
      description: description ?? this.description,
      author: author ?? this.author,
      scripts: scripts ?? this.scripts,
    );
  }

  Map<String, dynamic> toMap() {
    return <String, dynamic>{
      'name': name,
      'version': version,
      'description': description,
      'author': author,
      'scripts': scripts,
    };
  }

  factory PackageJson.fromMap(Map<String, dynamic> map) {
    return PackageJson(
      name: map['name'] as String,
      version: map['version'] as String,
      description: map['description'] as String,
      author: map['author'] as String,
      scripts: Map<String, String>.from(map['scripts']),
    );
  }

  String toJson() => json.encode(toMap());

  @override
  String toString() {
    // ignore: lines_longer_than_80_chars
    return 'PackageJson(name: $name, version: $version, description: $description, author: $author, scripts: $scripts)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    final mapEquals = const DeepCollectionEquality().equals;

    return other is PackageJson &&
        other.name == name &&
        other.version == version &&
        other.description == description &&
        other.author == author &&
        mapEquals(other.scripts, scripts);
  }

  @override
  int get hashCode {
    return name.hashCode ^
        version.hashCode ^
        description.hashCode ^
        author.hashCode ^
        scripts.hashCode;
  }
}
